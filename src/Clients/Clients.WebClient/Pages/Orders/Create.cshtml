@page "/orders/create"
@model Clients.WebClient.Pages.Orders.CreateModel

@{
    ViewData["Title"] = "Nueva orden";
}

<h1 class="display-4">@ViewData["Title"]</h1>
<p>Creación de una nueva orden de compra</p>

<div id="app">
    <div v-if="isLoading" class="text-center mt-5 mb-5 display-4">
        <div v-if="!hasError">.. procesando la orden ..</div>
        <div v-else>.. no se pudo crear la orden ..</div>
    </div>

    <template v-else>
        <div class="form-group">
            <label>Método de pago</label>
            <select v-model.number="model.paymentType" class="form-control">
                <option :value="null" selected disabled>Seleccione un método de pago</option>
                <option v-for="item in paymentTypes" :value="item.value">{{item.label}}</option>
            </select>
        </div>

        <div class="form-group">
            <label>Cliente</label>
            <select v-model.number="model.clientId" class="form-control">
                <option :value="null" selected disabled>Seleccione un cliente</option>
                <option v-for="item in clients" :value="item.ClientId">{{item.Name}}</option>
            </select>
        </div>

        <div class="form-group">
            <label>Producto</label>
            <div class="input-group mb-3">
                <select v-model.number="selectProduct" class="form-control">
                    <option :value="null" selected disabled>Seleccione un producto</option>
                    <option v-for="item in products" :value="item.ProductId">{{item.Name}}</option>
                </select>
                <div class="input-group-prepend">
                    <button v-on:click="addItem" class="btn btn-outline-secondary" type="button">Agregar</button>
                </div>
            </div>
        </div>

        <table v-if="model.items.length" class="table mt-5 mb-3">
            <thead>
                <tr>
                    <th style="width:30px;"></th>
                    <th>Item</th>
                    <th style="width:120px;" class="text-right">Precio</th>
                    <th style="width:120px;" class="text-right">Cantidad</th>
                    <th style="width:150px;" class="text-right">Total</th>
                </tr>
            </thead>
            <tbody>
                <tr v-for="item in model.items">
                    <td>
                        <a v-on:click="removeItem(item.productId)" class="text-danger">Retirar</a>
                    </td>
                    <td>{{item.name}}</td>
                    <td class="text-right">{{item.price|currency}}</td>
                    <td class="text-right">
                        <input v-model.number="item.quantity" type="number" min="1" max="5" />
                    </td>
                    <td class="text-right">{{item.price * item.quantity|currency}}</td>
                </tr>
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="4"></td>
                    <td class="text-right" style="font-size:1.2em;">{{total|currency}}</td>
                </tr>
            </tfoot>
        </table>
        <div v-if="model.items.length > 0 && model.paymentType !== null && model.clientId !== null" class="text-center">
            <button v-on:click="save" type="button" class="btn btn-primary btn-block text-light btn-lg">Crear orden</button>
        </div>
    </template>
</div>

@section Scripts  {
    <script src="https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"></script>
    <script>
        new Vue({
            el: "#app",
            data: {
                paymentTypes: [
                    { value: 0, label: "Tarjeta de crédito" },
                    { value: 1, label: "PayPal" },
                    { value: 2, label: "Trasnferencia bancaria" }
                ],
                clients: @Html.Raw(JsonSerializer.Serialize(Model.Clients.Items)),
                products: @Html.Raw(JsonSerializer.Serialize(Model.Products.Items)),
                model: {
                    clientId: null,
                    paymentType: null,
                    items: []
                },
                selectProduct: null,
                isLoading: false,
                hasError: false
            },
            computed: {
                total() {
                    let total = 0;

                    this.model.items.forEach(x => total += x.price * x.quantity);

                    return total;
                }
            },
            methods: {
                addItem() {
                    if (this.selectProduct === null) return;
                    if (this.model.items.some(x => x.productId === this.selectProduct)) return;

                    let product = this.products.find(x => x.ProductId === this.selectProduct);

                    this.model.items.push({
                        productId: product.ProductId,
                        name: product.Name,
                        price: product.Price,
                        quantity: 1
                    });

                    this.selectProduct = null;
                },
                removeItem(id) {
                    this.model.items = this.model.items.filter(x => x.productId !== id);
                },
                save() {
                    let self = this;
                    self.isLoading = true;

                    fetch('/orders/create', {
                      method: 'POST',
                      body: JSON.stringify(self.model),
                      headers:{
                        'Content-Type': 'application/json; charset=utf-8'
                      }
                    }).then(response => response.ok)
                        .catch(error => console.error('Error:', error))
                        .then(response => {
                            console.log(response)
                            if (response) {
                                window.location.href = '/orders'
                            } else {
                                self.hasError = true;
                            }
                        });
                }
            },
            filters: {
                currency(value) {
                    return 'CLP$ ' + parseFloat(value).toFixed(2);
                }
            }
        })
    </script>
}

<style>
*{
	padding: 0;
	margin: 0;
	font-family: 'Josefin Sans', sans-serif;
}
body{
	background-color: #191919;
}
.hero{
	height: 100vh;
	width: 100%;
	background-size: cover;
	background-position: center;
}
nav{
	display: flex;
	align-items: center;
	justify-content: space-between;
}
.logo{
	color: white;
	font-size: 35px;
	letter-spacing: 1px;
	cursor: pointer;
}
span{
	color: #f9004d;
}
nav ul li{
	list-style-type: none;
	display: inline-block;
	padding: 10px  25px;
}
nav ul li a{
	color: white;
	text-decoration: none;
	font-weight: bold;
	text-transform: capitalize;
}
nav ul li a:hover{
	color: #f9004d;
	transition: .4s;
}
.btn{
	background-color:#f9004d;
	color: white;
	text-decoration: none;
	border: 2px solid transparent;
	font-weight: bold;
	padding: 10px 25px;
	border-radius: 30px;
	transition: transform .4s; 
}
.btn:hover{
	transform: scale(1.2);
}
.content{
	position: absolute;
	top: 50%;
	left:8%;
	transform: translateY(-50%);
}
h1{
	color: white;
	margin: 20px 0px 20px;
	font-size: 75px;
}
h3{
	color: white;
	font-size: 25px;
	margin-bottom: 50px;
}
h4{
	color: #fcfc;
	letter-spacing: 2px;
	font-size: 20px;
}
th{
	color: white;
}
td{
	color: white;
}
p{
	color: white;
}
.newslatter form{
	width: 380px;
	max-width: 100%;
	position: relative;
}
.newslatter form input:first-child{
	display: inline-block;
	width: 100%;
	padding: 14px 130px 14px 15px;
	border: 2px solid #f9004d;
	outline: none;
	border-radius: 30px;
}
.newslatter form input:last-child{
	position: absolute;
	display: inline-block;
	outline: none;
	border: none;
	padding: 10px 30px;
	border-radius: 30px;
	background-color:#f9004d;
	color: white;
	box-shadow: 0px 0px 5px #000, 0px 0px 15px #858585;
	top: 6px;
	right: 6px; 
}

.about{
	width: 100%;
	padding: 100px 0px;
	background-color: #191919;
}
.about img{
	height: auto;
	width: 430px;
}
.about-text{
	width: 550px;
}
.main{
	width: 1130px;
	max-width: 95%;
	margin: 0 auto;
	display: flex;
	align-items: center;
	justify-content: space-around;
}
.about-text h2{
	color: white;
	font-size: 75px;
	text-transform: capitalize;
	margin-bottom: 20px;
}
.about-text h5{
	color: white;
	letter-spacing: 2px;
	font-size: 22px;
	margin-bottom: 25px;
	text-transform: capitalize;
}
.about-text p{
	color: #fcfc;
	letter-spacing: 1px;
	line-height: 28px;
	font-size: 18px;
	margin-bottom: 45px;
}
button{
	background-color:#f9004d;
	color: white;
	text-decoration: none;
	border: 2px solid transparent;
	font-weight: bold;
	padding: 13px 30px;
	border-radius: 30px;
	transition: .4s; 
}
button:hover{
	background-color: transparent;
	border: 2px solid #f9004d;
	cursor: pointer;
}

.service{
	background: #101010;
	width: 100%;
	padding: 100px 0px;
}
.title h2{
	color: white;
	font-size: 75px;
	width: 1130px;
	margin: 30px auto;
	text-align: center;
}
.box{
	display: flex;
	justify-content: center;
	align-items: center;
	min-height: 400px;
}
.card{
	height: 365px;
	width: 335px;
	padding: 20px 35px;
	background: #191919;
	border-radius: 20px;
	margin: 15px;
	position: relative;
	overflow: hidden;
	text-align: center;
}
.card i{
	font-size: 50px;
	display: block;
	text-align: center;
	margin: 25px 0px;
	color: #f9004d;

}
h5{
	color: white;
	font-size: 23px;
	margin-bottom: 15px;
}
.pra p{
	color: #fcfc;
	font-size: 16px;
	line-height: 27px;
	margin-bottom: 25px;
}
.card .button{
	background-color:#f9004d;
	color: white;
	text-decoration: none;
	border: 2px solid transparent;
	font-weight: bold;
	padding: 9px 22px;
	border-radius: 30px;
	transition: .4s; 
}
.card .button:hover{
	background-color: transparent;
	border: 2px solid #f9004d;
	cursor: pointer;
}
.contact-me{
	width: 100%;
	height: 290px;
	background: #191919;
	display: flex;
	align-items: center;
	flex-direction: column;
	justify-content: center;
}
.contact-me p{
	color: white;
	font-size: 30px;
	font-weight: bold;
	margin-bottom: 25px;
}
.contact-me .button-two{
	background-color:#f9004d;
	color: white;
	text-decoration: none;
	border: 2px solid transparent;
	font-weight: bold;
	padding: 13px 30px;
	border-radius: 30px;
	transition: .4s; 
}
.contact-me .button-two:hover{
	background-color: transparent;
	border: 2px solid #f9004d;
	cursor: pointer;
}
footer{
	position: relative;
	width: 100%;
	height: 400px;
	background: #101010;
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
}
footer p:nth-child(1){
	font-size: 30px;
	color: white;
	margin-bottom: 20px;
	font-weight: bold;
}
footer p:nth-child(2){
	color: white;
	font-size: 17px;
	width: 500px;
	text-align: center;
	line-height: 26px;
}
.social{
	display: flex;
}
.social a{
	width: 45px;
	height: 45px;
	display: flex;
	align-items: center;
	justify-content: center;
	background:  #f9004d;
	border-radius: 50%;
	margin: 22px 10px;
	color: white;
	text-decoration: none;
	font-size: 20px;
}
.social a:hover{
	transform: scale(1.3);
	transition: .3s;
}
.end{
	position: absolute;
	color:#f9004d;
	bottom: 35px;
	font-size: 14px; 
}
</style>